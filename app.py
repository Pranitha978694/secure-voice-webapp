# -*- coding: utf-8 -*-
"""app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WDKjIZW5uq9yGyZ8FoNOAd3IYhd1Bk8Y
"""

# Install required libraries
!pip install openai-whisper gradio noisereduce soundfile deep-translator gtts
!pip install torch
!apt update && apt install -y ffmpeg zip

# Imports
import gradio as gr
import whisper
import os, subprocess, zipfile
import noisereduce as nr, soundfile as sf
from deep_translator import GoogleTranslator
import gtts

# Whisper Transcription
def transcribe_audio(filename):
    model = whisper.load_model("base")
    result = model.transcribe(filename)
    return result["text"]

# Translation
def translate_text(text, target_language):
    lang_map = {
        "english": "en", "hindi": "hi", "tamil": "ta", "telugu": "te",
        "bengali": "bn", "french": "fr", "german": "de", "arabic": "ar",
        "chinese": "zh", "russian": "ru", "urdu": "ur"
    }
    lang_code = lang_map.get(target_language.lower())
    if not lang_code:
        return "Language not supported"
    return GoogleTranslator(source='auto', target=lang_code).translate(text)

# Text to Speech
def text_to_speech(text, lang):
    lang_map = {
        "english": "en", "hindi": "hi", "tamil": "ta", "telugu": "te",
        "bengali": "bn", "french": "fr", "german": "de", "arabic": "ar",
        "chinese": "zh", "russian": "ru", "urdu": "ur"
    }
    if lang.lower() not in lang_map:
        return None, None
    try:
        filepath = "translated_speech.mp3"
        tts = gtts.gTTS(text, lang=lang_map[lang.lower()])
        tts.save(filepath)
        return filepath, filepath
    except Exception as e:
        print(f"TTS Error: {e}")
        return None, None

# Full Process
def process_audio(file_path, target_language):
    if not file_path or not os.path.exists(file_path):
        return "‚ùå Error: Invalid file path!", None, None, None, None, None

    transcription = transcribe_audio(file_path)
    translation = translate_text(transcription, target_language)

    translated_text_file = "translated_text.txt"
    with open(translated_text_file, "w", encoding="utf-8") as f:
        f.write(translation)

    tts_file, downloadable = text_to_speech(translation, target_language)

    return transcription, translation, tts_file, downloadable, translated_text_file, translated_text_file

# Create password-protected ZIP
def create_password_zip(file_path, password):
    zip_filename = "translated_text_protected.zip"
    cmd = f"zip -j -P {password} {zip_filename} {file_path}"
    os.system(cmd)
    return zip_filename

# Gradio Interface
def interface():
    with gr.Blocks() as demo:
        gr.Markdown("# üéô Secure Speech Processing\nTranscribe, Translate, Save & Password-Protect ZIP")

        with gr.Tab("Step 1: Transcribe & Translate"):
            audio_input = gr.Audio(sources=["microphone", "upload"], type="filepath")
            language_dropdown = gr.Dropdown(
                choices=["english", "hindi", "tamil", "telugu", "bengali", "french", "german", "arabic", "chinese", "russian", "urdu"],
                label="üåê Target Translation Language"
            )
            transcribe_btn = gr.Button("Translate & Generate Text")

            transcription_output = gr.Textbox(label="üìù Transcription")
            translated_output = gr.Textbox(label="üåç Translated Text")
            tts_audio = gr.Audio(label="üîä Translated Audio")
            tts_download = gr.File(label="‚¨á Download Audio")
            text_file_output = gr.File(label="‚¨á Download Translated Text File")
            text_file_download = gr.File(label="‚¨á Click to Download Translated Text", interactive=True)

            transcribe_btn.click(
                process_audio,
                inputs=[audio_input, language_dropdown],
                outputs=[transcription_output, translated_output, tts_audio, tts_download, text_file_output, text_file_download]
            )

        with gr.Tab("Step 2: Protect Text File with Password"):
            file_path_input = gr.Textbox(label="Enter translated text file path (default: translated_text.txt)")
            zip_password_input = gr.Textbox(label="üîê Enter ZIP Password", type="password")
            zip_button = gr.Button("üîí Create Password-Protected ZIP")
            zip_file_output = gr.File(label="‚¨á Download Password ZIP")

            zip_button.click(
                create_password_zip,
                inputs=[file_path_input, zip_password_input],
                outputs=zip_file_output
            )

    demo.launch(share=True)

# Run the app
if __name__ == "__main__":
    interface()